<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Hydrator\HydratorException;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppDocumentGuestHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate(object $document, array $data, array $hints = array()): array
    {
        $hydratedData = array();

        /** @ReferenceOne */
        if (isset($data['guest']) || (! empty($this->class->fieldMappings['guest']['nullable']) && array_key_exists('guest', $data))) {
            $return = $data['guest'];
            if ($return !== null) {
                if ($this->class->fieldMappings['guest']['storeAs'] !== ClassMetadata::REFERENCE_STORE_AS_ID && ! is_array($return)) {
                    throw HydratorException::associationTypeMismatch('App\Document\Guest', 'guest', 'array', gettype($return));
                }

                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['guest'], $return);
                $identifier = ClassMetadata::getReferenceId($return, $this->class->fieldMappings['guest']['storeAs']);
                $targetMetadata = $this->dm->getClassMetadata($className);
                $id = $targetMetadata->getPHPIdentifierValue($identifier);
                $return = $this->dm->getReference($className, $id);
            }

            $this->class->reflFields['guest']->setValue($document, $return);
            $hydratedData['guest'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['invitation']) || (! empty($this->class->fieldMappings['invitation']['nullable']) && array_key_exists('invitation', $data))) {
            $value = $data['invitation'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['invitation']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['invitation']->setValue($document, $return);
            $hydratedData['invitation'] = $return;
        }
        return $hydratedData;
    }
}